generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  image         String?
  emailVerified DateTime?
  isAdmin       Boolean   @default(false)

  accounts           Account[]
  sessions           Session[]
  competitions       Competition[]
  problemOpens       ProblemOpen[]
  problemQueries     ProblemQuery[]
  problemSubmissions ProblemSubmission[]
  CodexPrompt        CodexPrompt[]
  @@map("users")
}

model Competition {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  content   String?

  problems        Problem[]
  registeredUsers User[]
}

model Problem {
  id            String            @id
  name          String
  dbName        String
  description   String
  difficulty    ProblemDifficulty
  points        Int
  competitionId String
  competition   Competition       @relation(fields: [competitionId], references: [id])
  codexPrompt   String?

  opens       ProblemOpen[]
  queries     ProblemQuery[]
  submissions ProblemSubmission[]
  CodexPrompt CodexPrompt[]
}

model ProblemOpen {
  id        String   @id @default(cuid())
  problemId String
  userId    String
  createdAt DateTime @default(now())

  problem Problem @relation(fields: [problemId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([problemId, userId])
}

model ProblemQuery {
  id        String   @id @default(cuid())
  problemId String
  userId    String
  createdAt DateTime @default(now())
  query     String

  problem Problem @relation(fields: [problemId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model ProblemSubmission {
  id        String   @id @default(cuid())
  problemId String
  userId    String
  createdAt DateTime @default(now())
  query     String
  correct   Boolean

  problem Problem @relation(fields: [problemId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model CodexPrompt {
  id        String   @id @default(cuid())
  problemId String
  userId    String
  createdAt DateTime @default(now())
  prompt    String
  answer    String

  problem Problem @relation(fields: [problemId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProblemDifficulty {
  EASY
  MEDIUM
  HARD
}
